<style>

.node {
  stroke: #fff;
  stroke-width: 1.5px;
}

.link {
  stroke: #999;
  stroke-opacity: .6;
}

#lattice .label{
	font-weight: bold;
	font-family: sans-serif;
	cursor: pointer;
}
</style>
<div id="lattice"></div>
<script>
function lattice0(){
 var width = 960,
     height = 500;

 var color = d3.scale.category20();

 var linkDistance = 100;
 var nodeRadius = 18;

 var force = d3.layout.force()
    .charge(-300)
    .gravity(0)
    .linkDistance(linkDistance)
    .size([width, height]);

 var svg = d3.select("#lattice").append("svg")
    .attr("width", width)
    .attr("height", height);
 // FIXME remove reference to base path...
 d3.json("/contento/<?php print route('taxonomies', 'd3input', array('taxonomy' => $this->itemOf('taxonomy','id')));?>", function(error, graph) {

  force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

  var link = svg.selectAll(".link")
      .data(graph.links)
      .enter().append("line")
      .attr("class", "link")
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });

  var g = svg.selectAll(".node")
      .data(graph.nodes)
      .enter().append("g");
  var node = g
      .append("circle")
      .attr("class", "node")
      .attr("r", nodeRadius)
      .style("fill", function(d) { return color(d.group); })
      .call(force.drag);

  var text = g.append("text")
  		.attr("class","label")
  	    .text(function(d) { return d.name; }).on('click', function(d){
			var go = "<?php print route('taxonomies', 'lattice',  array('taxonomy' => $this->itemOf('taxonomy','id'), 'concept' => 'XXX' ));?>";
			go=go.replace('XXX', d.name);
          window.location.href=go;});

  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    var flip = true;
    node.attr("cx", function(d) {
        	if(d.role == 't' || d.role == 'b'){
				d.x = parseInt(svg.attr('width'))/2;
            } 
            // put one on the right, one on the left
            if(flip){
				if(d.x > (width/2)){
					d.x = (width/2) - (d.x-(width/2) +3);
				}
            } else {
            	if(d.x < (width/2)){
					d.x = (width/2) + ((width/2)-d.x -3);
				}
            }
            flip = !flip;
        	return d.x; 
        })
        .attr("cy", function(d) { 
        	if( d.role == 'b'){
				d.y = parseInt(svg.attr('height')) - 20;
            }else if( d.role == 't'){
				d.y = 20;
            }

            // Position relatively to its parent
            var tops = d.top;
            for( var q = 0; q < tops.length; q++ ){
            	var parent = d3.select(node[0][tops[q]]).datum();
            	if(parent.y > d.y){
					d.y = parent.y + 1;
                }
            }
            return d.y; 
         });

    text
  		.attr("y", function(d){ return d.y+5})
  		.attr("x", function(d){ return d.x-12});
  });
 });
}
lattice0();
</script>